#!/usr/bin/env python3
"""
Script para verificar el funcionamiento del contador de carrito en el navbar
"""

import os
import sys
import django

# Configurar Django
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.append(project_root)
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pagoOnline.settings')
django.setup()

from django.test import Client
from django.contrib.auth import get_user_model
from miPaypal.models import Product, Cart, CartItem, Category, Brand
from django.urls import reverse

def test_cart_counter():
    print("üîß INICIANDO VERIFICACI√ìN DEL CONTADOR DE CARRITO")
    print("=" * 60)
    
    # Crear cliente de prueba
    client = Client()
    
    # Verificar que existan productos
    products = Product.objects.all()
    if not products.exists():
        print("‚ùå No hay productos en la base de datos")
        return False
    
    product = products.first()
    print(f"‚úÖ Producto encontrado: {product.name}")
    
    # 1. Verificar p√°gina de inicio sin productos en carrito
    print("\n1Ô∏è‚É£ Verificando p√°gina de inicio sin productos en carrito...")
    response = client.get(reverse('index-page'))
    if response.status_code == 200:
        print("‚úÖ P√°gina de inicio carga correctamente")
        # Verificar que cart_count est√© en el contexto
        if 'cart_count' in response.context:
            cart_count = response.context['cart_count']
            print(f"‚úÖ cart_count en contexto: {cart_count}")
        else:
            print("‚ùå cart_count no est√° en el contexto")
    else:
        print(f"‚ùå Error al cargar p√°gina de inicio: {response.status_code}")
        return False
    
    # 2. A√±adir producto al carrito
    print(f"\n2Ô∏è‚É£ A√±adiendo producto {product.name} al carrito...")
    add_to_cart_url = reverse('add_to_cart', args=[product.id]) + '?next=' + reverse('index-page')
    response = client.post(add_to_cart_url)
    
    if response.status_code == 302:  # Redirecci√≥n esperada
        print("‚úÖ Producto a√±adido al carrito correctamente")
    else:
        print(f"‚ùå Error al a√±adir producto al carrito: {response.status_code}")
        return False
    
    # 3. Verificar contador despu√©s de a√±adir producto
    print("\n3Ô∏è‚É£ Verificando contador despu√©s de a√±adir producto...")
    response = client.get(reverse('index-page'))
    if response.status_code == 200:
        if 'cart_count' in response.context:
            cart_count = response.context['cart_count']
            print(f"‚úÖ cart_count despu√©s de a√±adir: {cart_count}")
            if cart_count > 0:
                print("‚úÖ Contador actualizado correctamente")
            else:
                print("‚ùå Contador no se actualiz√≥")
        else:
            print("‚ùå cart_count no est√° en el contexto")
    
    # 4. Verificar p√°gina de productos
    print("\n4Ô∏è‚É£ Verificando p√°gina de productos...")
    response = client.get(reverse('products-page'))
    if response.status_code == 200:
        print("‚úÖ P√°gina de productos carga correctamente")
        if 'cart_count' in response.context:
            cart_count = response.context['cart_count']
            print(f"‚úÖ cart_count en p√°gina de productos: {cart_count}")
        else:
            print("‚ùå cart_count no est√° en el contexto de productos")
    
    # 5. A√±adir otro producto desde p√°gina de productos
    print(f"\n5Ô∏è‚É£ A√±adiendo otro producto desde p√°gina de productos...")
    if products.count() > 1:
        second_product = products[1]
        add_url = reverse('add_to_cart', args=[second_product.id]) + '?next=' + reverse('products-page')
        response = client.post(add_url)
        
        if response.status_code == 302:
            print("‚úÖ Segundo producto a√±adido correctamente")
            
            # Verificar contador
            response = client.get(reverse('products-page'))
            if 'cart_count' in response.context:
                cart_count = response.context['cart_count']
                print(f"‚úÖ cart_count despu√©s del segundo producto: {cart_count}")
            
        else:
            print(f"‚ùå Error al a√±adir segundo producto: {response.status_code}")
    
    # 6. Verificar carrito
    print("\n6Ô∏è‚É£ Verificando vista del carrito...")
    response = client.get(reverse('view_cart'))
    if response.status_code == 200:
        print("‚úÖ Vista del carrito carga correctamente")
        if 'cart_count' in response.context:
            cart_count = response.context['cart_count']
            print(f"‚úÖ cart_count en vista del carrito: {cart_count}")
        else:
            print("‚ùå cart_count no est√° en el contexto del carrito")
        
        # Verificar items en el carrito
        if 'cart_items' in response.context:
            cart_items = response.context['cart_items']
            print(f"‚úÖ Items en carrito: {len(cart_items)}")
            total_items = sum(item.quantity for item in cart_items)
            print(f"‚úÖ Total de productos: {total_items}")
        
    print("\n" + "=" * 60)
    print("‚úÖ VERIFICACI√ìN COMPLETADA")
    return True

if __name__ == "__main__":
    test_cart_counter()
